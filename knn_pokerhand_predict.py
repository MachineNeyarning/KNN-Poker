# -*- coding: utf-8 -*-
"""KNN-PokerHand-Predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JSlczDT_Jwj8mvWYxirJA2E1sVRQOF6K

# Dataset escolhido: https://archive.ics.uci.edu/dataset/158/poker+hand

---


*   O dataset traz várias mãos de poker e sua classificação (CLASS). Prever a classificação de novas mãos pode ser facilmente programado usando lógica determinística, com 100% de taxa de acerto. Escolhi esse dataset para testar a taxa de acerto de um algoritmo probabilístico, como o KNN, em uma tarefa como essa.

---

### Explicação do CLASS:

* 0: Nothing in hand; nenhuma mão de poker reconhecida
* 1: One pair; um par de cartas de mesmo valor entre cinco cartas
* 2: Two pairs; dois pares de cartas de mesmo valor entre cinco cartas
* 3: Three of a kind; três cartas de mesmo valor
* 4: Straight; cinco cartas em sequência, sem intervalos
* 5: Flush; cinco cartas do mesmo naipe
* 6: Full house; um par + uma trinca de valor diferente
* 7: Four of a kind; quatro cartas de mesmo valor
* 8: Straight flush; sequência + mesmo naipe
* 9: Royal flush; {Ás, Rei, Dama, Valete, Dez} + mesmo naipe
"""

!pip install ucimlrepo
from ucimlrepo import fetch_ucirepo

import pandas as pd
import numpy as np

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# essa parte copiei do site do dataset https://archive.ics.uci.edu/dataset/158/poker+hand

# fetch dataset
poker_hand = fetch_ucirepo(id=158)

# data (as pandas dataframes)
X = poker_hand.data.features
y = poker_hand.data.targets

# metadata
print(poker_hand.metadata)

# variable information
print(poker_hand.variables)

# criar dataframe

df = pd.concat([X, y], axis=1)

display(df.head(5))

pd.set_option("display.float_format", "{:.2f}".format) # tive que colocar isso senao ele tava mostrando em notacao cientifica
display(df.describe())

x = df.drop("CLASS", axis=1)
y = df["CLASS"]

print(x.shape, y.shape)

"""# KNN com Holdout simples (70% treino - 30% teste)"""

# demora bastante pra rodar, acredito que por o dataset ser grande
# para nao precisar ficar de novo, o resultado foi: Accuracy Holdout: 60.287216710080884%
# com esses parametros padroes aqui: (x, y, test_size=0.3, random_state=42, stratify=y)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42, stratify=y)

knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(x_train, y_train)

acc_holdout = knn.score(x_test, y_test)
print(f'Accuracy Holdout: {acc_holdout*100}%')

"""# KNN com Holdout Repetido (70% treino - 30% teste)"""

from sklearn.model_selection import ShuffleSplit, cross_val_score

classifier_repetido = KNeighborsClassifier(n_neighbors=3)

cv_shuffle = ShuffleSplit(n_splits = 10, test_size = 0.3, random_state = 42)

acc_repetido = cross_val_score(classifier_repetido, x, y, cv=cv_shuffle)

print(acc_repetido)
print('------------------------------------------------------------')
print(f'Media Accuracy Holdout Repetido: {acc_repetido.mean()*100:.3f}%')

"""# KNN com Validacao Cruzada | K-FOLD"""

acc_kfold = cross_val_score(classifier_repetido, x, y, cv=42)

print(acc_kfold)
print('------------------------------------------------------------')
print(f'Media Accuracy K-Fold: {acc_kfold.mean()*100:.3f}%')